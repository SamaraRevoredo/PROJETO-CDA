
TesteCentralAlarme.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001f2  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001f2  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000221  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000949  00000000  00000000  00000259  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000684  00000000  00000000  00000ba2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000310  00000000  00000000  00001226  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  00001538  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  0000158c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008c  00000000  00000000  00001794  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001820  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000019a  0000019a  000001ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001848  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.setupI2C 00000016  00000184  00000184  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.MT_transmit 00000066  000000e8  000000e8  0000013c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.MT_receive 00000068  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000036  0000014e  0000014e  000001a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   8:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
   c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  10:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  14:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  18:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  1c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  20:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  24:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  28:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  2c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  30:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  34:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  38:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  3c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  40:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  44:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  48:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  4c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  50:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  54:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  58:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  5c:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  60:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>
  64:	0c 94 cd 00 	jmp	0x19a	; 0x19a <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

0000019a <__bad_interrupt>:
 19a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.setupI2C:

00000184 <setupI2C>:
	if(!(PINC & (1<<PINC3))) MT_receive(0x41);
	}
}

void setupI2C(){
	DDRC = 0x30; 
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	87 b9       	out	0x07, r24	; 7
	TWBR = (1<<TWBR1); // Configurando fator de divisão da taxa de bits para 2 
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR |= (1<<TWPS1); // Configurando Prescaler da taxa  de bits para 16
 18e:	e9 eb       	ldi	r30, 0xB9	; 185
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	82 60       	ori	r24, 0x02	; 2
 196:	80 83       	st	Z, r24
 198:	08 95       	ret

Disassembly of section .text.MT_transmit:

000000e8 <MT_transmit>:




bool MT_transmit(uint8_t addr, uint8_t data){
	TWCR = (1<< TWINT)|(1<<TWSTA)|(1<<TWEN); // start
  e8:	94 ea       	ldi	r25, 0xA4	; 164
  ea:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
  ee:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f2:	99 23       	and	r25, r25
  f4:	e4 f7       	brge	.-8      	; 0xee <MT_transmit+0x6>
	if ((TWSR & 0xF8) != START) return false; 
  f6:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  fa:	98 7f       	andi	r25, 0xF8	; 248
  fc:	98 30       	cpi	r25, 0x08	; 8
  fe:	09 f5       	brne	.+66     	; 0x142 <MT_transmit+0x5a>
	TWDR  = addr;				// envia endereço no modo de escrita
 100:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 104:	84 e8       	ldi	r24, 0x84	; 132
 106:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
 10a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 10e:	88 23       	and	r24, r24
 110:	e4 f7       	brge	.-8      	; 0x10a <MT_transmit+0x22>
	if ((TWSR & 0xF8) != MT_SLA_ACK) return false; 
 112:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 116:	88 7f       	andi	r24, 0xF8	; 248
 118:	88 31       	cpi	r24, 0x18	; 24
 11a:	a9 f4       	brne	.+42     	; 0x146 <MT_transmit+0x5e>
	TWDR  = data;				// envia dados
 11c:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 120:	84 e8       	ldi	r24, 0x84	; 132
 122:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
 126:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 12a:	88 23       	and	r24, r24
 12c:	e4 f7       	brge	.-8      	; 0x126 <MT_transmit+0x3e>
	if ((TWSR & 0xF8)!= MT_DATA_ACK) return false;
 12e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	88 32       	cpi	r24, 0x28	; 40
 136:	49 f4       	brne	.+18     	; 0x14a <MT_transmit+0x62>
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); // stop
 138:	84 e9       	ldi	r24, 0x94	; 148
 13a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	return true;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	08 95       	ret


bool MT_transmit(uint8_t addr, uint8_t data){
	TWCR = (1<< TWINT)|(1<<TWSTA)|(1<<TWEN); // start
	while (!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8) != START) return false; 
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	08 95       	ret
	TWDR  = addr;				// envia endereço no modo de escrita
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8) != MT_SLA_ACK) return false; 
 146:	80 e0       	ldi	r24, 0x00	; 0
 148:	08 95       	ret
	TWDR  = data;				// envia dados
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8)!= MT_DATA_ACK) return false;
 14a:	80 e0       	ldi	r24, 0x00	; 0
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); // stop
	return true;
}
 14c:	08 95       	ret

Disassembly of section .text.MT_receive:

00000080 <MT_receive>:

bool MT_receive(uint8_t addr){
	TWCR = (1<< TWINT)|(1<<TWSTA)|(1<<TWEN); // start
  80:	94 ea       	ldi	r25, 0xA4	; 164
  82:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	while (!(TWCR & (1<<TWINT)));
  86:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  8a:	99 23       	and	r25, r25
  8c:	e4 f7       	brge	.-8      	; 0x86 <MT_receive+0x6>
	if ((TWSR & 0xF8) != START) return false;
  8e:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  92:	98 7f       	andi	r25, 0xF8	; 248
  94:	98 30       	cpi	r25, 0x08	; 8
  96:	11 f5       	brne	.+68     	; 0xdc <MT_receive+0x5c>
	TWDR  = addr;				// envia endereço no modo de leitura
  98:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
  9c:	84 e8       	ldi	r24, 0x84	; 132
  9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
  a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	88 23       	and	r24, r24
  a8:	e4 f7       	brge	.-8      	; 0xa2 <MT_receive+0x22>
	if ((TWSR & 0xF8) != MR_SLA_ACK) return false;	// confere ACK do escravo após endereçamento
  aa:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  ae:	88 7f       	andi	r24, 0xF8	; 248
  b0:	80 34       	cpi	r24, 0x40	; 64
  b2:	b1 f4       	brne	.+44     	; 0xe0 <MT_receive+0x60>
	
	TWCR = (1<<TWINT) | (1<<TWEN);					// Recebe byte de dados
  b4:	84 e8       	ldi	r24, 0x84	; 132
  b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
  ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  be:	88 23       	and	r24, r24
  c0:	e4 f7       	brge	.-8      	; 0xba <MT_receive+0x3a>
	if ((TWSR & 0xF8) != MR_DATA_NACK) return false;
  c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
  c6:	88 7f       	andi	r24, 0xF8	; 248
  c8:	88 35       	cpi	r24, 0x58	; 88
  ca:	61 f4       	brne	.+24     	; 0xe4 <MT_receive+0x64>
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); // stop
  cc:	84 e9       	ldi	r24, 0x94	; 148
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	PORTD = TWDR;
  d2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  d6:	8b b9       	out	0x0b, r24	; 11
	return true;
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	08 95       	ret

bool MT_receive(uint8_t addr){
	TWCR = (1<< TWINT)|(1<<TWSTA)|(1<<TWEN); // start
	
	while (!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8) != START) return false;
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	08 95       	ret
	TWDR  = addr;				// envia endereço no modo de leitura
	TWCR = (1<<TWINT) | (1<<TWEN);
	while (!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8) != MR_SLA_ACK) return false;	// confere ACK do escravo após endereçamento
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	08 95       	ret
	
	TWCR = (1<<TWINT) | (1<<TWEN);					// Recebe byte de dados
	while (!(TWCR & (1<<TWINT)));
	if ((TWSR & 0xF8) != MR_DATA_NACK) return false;
  e4:	80 e0       	ldi	r24, 0x00	; 0
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWSTO); // stop
	PORTD = TWDR;
	return true;
}
  e6:	08 95       	ret

Disassembly of section .text.main:

0000014e <main>:
#define MR_DATA_ACK 0x50
#define MR_DATA_NACK 0x58

int main(void)
{
	setupI2C();
 14e:	0e 94 c2 00 	call	0x184	; 0x184 <setupI2C>
	PORTB = 0x00;
 152:	15 b8       	out	0x05, r1	; 5
	PORTC |= (1<<PORTC3);
 154:	88 b1       	in	r24, 0x08	; 8
 156:	88 60       	ori	r24, 0x08	; 8
 158:	88 b9       	out	0x08, r24	; 8
	if(!MT_transmit(0x40,0xff)) PORTB = 0xFF;
 15a:	6f ef       	ldi	r22, 0xFF	; 255
 15c:	80 e4       	ldi	r24, 0x40	; 64
 15e:	0e 94 74 00 	call	0xe8	; 0xe8 <MT_transmit>
 162:	81 11       	cpse	r24, r1
 164:	02 c0       	rjmp	.+4      	; 0x16a <main+0x1c>
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	85 b9       	out	0x05, r24	; 5
	if(!MT_receive(0x41)) PORTB = 0xAF;
 16a:	81 e4       	ldi	r24, 0x41	; 65
 16c:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
 170:	81 11       	cpse	r24, r1
 172:	02 c0       	rjmp	.+4      	; 0x178 <main+0x2a>
 174:	8f ea       	ldi	r24, 0xAF	; 175
 176:	85 b9       	out	0x05, r24	; 5


    while(1)
    {
        //TODO:: Please write your application code 
	if(!(PINC & (1<<PINC3))) MT_receive(0x41);
 178:	33 99       	sbic	0x06, 3	; 6
 17a:	fe cf       	rjmp	.-4      	; 0x178 <main+0x2a>
 17c:	81 e4       	ldi	r24, 0x41	; 65
 17e:	0e 94 40 00 	call	0x80	; 0x80 <_etext>
 182:	fa cf       	rjmp	.-12     	; 0x178 <main+0x2a>
